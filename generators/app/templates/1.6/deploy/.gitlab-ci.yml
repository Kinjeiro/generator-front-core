# ПРОТЕСТИРОВАТЬ ВАЛИДНОСТЬ ФАЙЛА - https://gitlab.com/<your_project>/-/ci/lint

#// ======================================================
#// ПЕРЕМЕННЫЕ GITLAB Runner СРЕДЫ
#// ======================================================
# 1) публичный ключ от сервера положить в DEPLOYS_KEYS (https://gitlab.com/<your_project>/settings/repository -> DEPLOYS KEYS)
# Если такой сервер уже был на gitlab - посмотрите там же на закладку: Privately accessible deploy keys 2 и нажмите Enable

# 2) Переменные из VARIABLES (https://gitlab.com/<your_project>/settings/ci_cd -> VARIABLES)
#   DEV_PRIVATE_SSH_KEY - содержимое приватного ключа сервера
#   DEV_HOST
#   DEV_USER
#   DEV_APP_PATH
#   DEV_START_NODE_ENV_JSON
#
#   PROD_PRIVATE_SSH_KEY
#   PROD_HOST
#   PROD_USER
#   PROD_APP_PATH
#   PROD_START_NODE_ENV_JSON

# Достпуны переменные от Gitlab CI - https://docs.gitlab.com/ee/ci/variables/#predefined-variables-environment-variables
# $CI_COMMIT_REF_NAME -
# $CI_ENVIRONMENT_NAME - имя enviroment.name (у нас либо 'development' \ либо 'production')
# $CI_ENVIRONMENT_SLUG -  is a "cleaned-up" version of the name, suitable for use in URLs, DNS, etc
# $CI_ENVIRONMENT_URL - Starting with GitLab 9.3, the environment URL is exposed to the Runner via $CI_ENVIRONMENT_URL. The URL would be expanded from .gitlab-ci.yml, or if the URL was not defined there, the external URL from the environment would be used.
# $CI_PROJECT_URL - путь
# $CI_REPOSITORY_URL - а тут путь с токеном каким-то



#// ======================================================
#// СТАРТ
#// ======================================================

# Docker gitlab runner executer

# https://pm2.io/doc/en/runtime/integration/docker/
#image: keymetrics/pm2:3.2.2 - у них нет версий, только latest
# у них была проблема, что обновили и pm2 стал падать с ошибкой
#image: keymetrics/pm2:latest-alpine
image: keymetrics/pm2:10-alpine

stages:
  - deploy


#// ======================================================
#// АВТОРИЗАЦИОННАЯ СХЕМА
#// ======================================================
# 1) Приконнектится c gitlab runner (gitlab_ci) образа через pm2 deploy на удаленный сервер
# gitlab_ci (PROD_PRIVATE_SSH_KEY) ----> target_server (public ключ access в ~/.ssh/authorized_keys )
# 2) а изнутри сервера уже склонировать private репозиторий
# targer_server: git clone (private key есть, лучше чтобы назывался id_rsa иначе нужно в config настраивать маппинг ключа на gitlab) ----> gitlab ci deploys keys (public key)
#   ~/.ssh/config
#   # GitLab.com server
#   Host gitlab.com
#   RSAAuthentication yes
#   IdentityFile ~/.ssh/kinjeiro
# 3) и запустить сборку проекта

# !!! перед этим сгенерируйте ключ на сервере - будем его использовать одновеременно и для коннекта к private gitlab репе и доступу из gitlab runner к этому серверу
#   ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
#   cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys // чтобы мы потом могли создав private key из переменной в gitlab runner получить доступ к серверу
#   cat ~/.ssh/id_rsa.pub // публичный ключ pub положить в DEPLOYS_KEYS (https://gitlab.com/<your_project>/settings/repository -> DEPLOYS KEYS)
#   ssh -T git@gitlab.com // протестить
#   cat ~/.ssh/id_rsa // содержимое приватного в переменные PROD_PRIVATE_SSH_KEY \ DEV_PRIVATE_SSH_KEY (https://gitlab.com/<your_project>/settings/ci_cd -> VARIABLES)


#// ======================================================
#// DEPLOY SSH KEY
#// ======================================================
#deploy_ssh_key: &deploy_ssh_key
# важно поменить точкой впереди, чтобы gitlab yamp не воспринимал его как блок
.deploy_ssh_key: &deploy_ssh_key
  before_script:
    - TARGET_HOST_FINAL="${TARGET_HOST:-dev.reagentum.ru}"
    - TARGET_USER_FINAL="${TARGET_USER:-root}"

    # символ ":" является оператором в yaml и чтобы его заэкранировать нужно писать множественные строки через |-
    - |-
      echo "==============================="
      echo "========= VARIABLES ==========="
      echo "==============================="
      echo "REPO: $REPO"
      echo "DEPLOY_ENV: $DEPLOY_ENV"
      echo "TARGET_HOST: $TARGET_HOST_FINAL"
      echo "TARGET_USER: $TARGET_USER"
      echo "TARGET_USER_FINAL: $TARGET_USER_FINAL"
      echo "TARGET_PRIVATE_SSH_KEY: true"

      echo "TARGET_APP_PATH: $TARGET_APP_PATH"
      echo "TARGET_START_NODE_ENV_JSON: $TARGET_START_NODE_ENV_JSON"
      echo "==============================="

#    ##
#    ## Install ssh-agent if not already installed, it is required by Docker.
#    ## (change apt-get to yum if you use an RPM-based image)
#    ##
#    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git bash -y )'
    - apk update && apk upgrade
    - apk add git openssh bash

#    # // todo @ANKU @LOW @BUG_OUT @pm2 - у них в образе что-то изменилось и начало у меня падать: cannot find module ./add_days/index.js
#    - npm i -g pm2@3.2.3

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Add the SSH key stored in DEV_PRIVATE_SSH_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - echo "$TARGET_PRIVATE_SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    ##
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    ##
    - touch ~/.ssh/known_hosts
    - ssh-keyscan $TARGET_HOST_FINAL >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    ##
    ## Alternatively, assuming you created the SSH_SERVER_HOSTKEYS variable
    ## previously, uncomment the following two lines instead.
    ##
    #- echo "$SSH_SERVER_HOSTKEYS" > ~/.ssh/known_hosts'
    #- chmod 644 ~/.ssh/known_hosts

    ##
    ## You can optionally disable host key checking. Be aware that by adding that
    ## you are suspectible to man-in-the-middle attacks.
    ## WARNING: Use this only with the Docker executor, if you use it with shell
    ## you will overwrite your user's SSH config.
    ##
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## email.
    ##
#    - git config --global user.email "gitlabCi@reagentum.ru"
#    - git config --global user.name "Reagentum Gitlab CI Executor"


    ##
    ## Optionally, if you will be using any Git commands, set the user name and
    ## email.
    ##

    # try to connect to GitLab.com
    - echo "Test Git connection"
    - ssh -T git@gitlab.com

    # try test ssh connection
    - echo "Test ssh connection" $TARGET_USER_FINAL $TARGET_HOST_FINAL
    - ssh -o StrictHostKeyChecking=no -T "$TARGET_USER_FINAL@$TARGET_HOST_FINAL"

#    - echo "Token $CI_JOB_TOKEN"
#    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com:reagentum/reafront/auth-server-oauth2.git".insteadOf git@gitlab.com:reagentum/reafront/auth-server-oauth2.git


#// ======================================================
#// RUN PM2 Deploy
#// ======================================================
.deploy_by_pm2: &deploy_by_pm2
  script:
    - echo "====== Deploy to $DEPLOY_ENV server ======"
    - pm2 report

    # // todo @ANKU @LOW - @BUG_OUT @GITLAB - у нас два обращение от private server to gitlab repo - здесь используются token keys
    # но при ошибки pm2 setup (так как директория уже существует в следующий раз) второй раз при деплои токен уже был недействителен
    # и падала ошибка:
    #   remote: HTTP Basic: Access denied
    #   fatal: Authentication failed for 'https://gitlab-ci-token:8p4t-abFSKvu691gZ6UL@gitlab.com/reagentum/reafront/auth-server-oauth2.git/'
    # выход из этой ситуации чтобы setup отрападывал без ошибок, поэтому добавили чтобы перед сетапом pm2 всегда очищал папку
    # pm2 ecosystem.config.js: 'pre-setup': `rm -rf ${APP_PATH}`,
    - echo "Setup tagget server directories"
    - pm2 deploy ./deploy/deploy.ecosystem.config.js $DEPLOY_ENV setup 2>&1 || true

    - echo "make deploy"
    - pm2 deploy ./deploy/deploy.ecosystem.config.js $DEPLOY_ENV --force


#// ======================================================
#// DEV
#// ======================================================
# запускаем при любом изменение мастера
deploy_dev:
  stage: deploy
  environment:
    name: development
  only:
    - master
  variables:
    DEPLOY_ENV: "development"
#    REPO: $CI_PROJECT_URL
    REPO: $CI_REPOSITORY_URL
    TARGET_HOST: $DEV_HOST
    TARGET_PRIVATE_SSH_KEY: $DEV_PRIVATE_SSH_KEY
#    // todo @ANKU @LOW @BUG_OUT @gitlab - они даже не прикрутили еще дефолтные значения https://gitlab.com/gitlab-org/gitlab-runner/issues/1867
#    TARGET_USER: ${DEV_USER:-root}
    TARGET_USER: $DEV_USER
    TARGET_APP_PATH: $DEV_APP_PATH
    TARGET_START_NODE_ENV_JSON: $DEV_START_NODE_ENV_JSON

  <<: *deploy_ssh_key
  <<: *deploy_by_pm2


#// ======================================================
#// PROD
#// ======================================================
# запускаем только в ручном режиме
deploy_prod:
  stage: deploy
  environment:
    name: production
  when: manual # запускаем вручную
  only:
    - master
  variables:
    DEPLOY_ENV: "production"
    REPO: $CI_REPOSITORY_URL
    TARGET_HOST: $PROD_HOST
    TARGET_PRIVATE_SSH_KEY: $PROD_PRIVATE_SSH_KEY
    TARGET_USER: $PROD_USER
    TARGET_APP_PATH: $PROD_APP_PATH
    TARGET_START_NODE_ENV_JSON: $PROD_START_NODE_ENV_JSON

  <<: *deploy_ssh_key
  <<: *deploy_by_pm2




#// ======================================================
#// Мусор
#// ======================================================
#    - ssh -o StrictHostKeyChecking=no "$TARGET_SERVER_USER@$TARGET_SERVER_HOST" 'rm -rf /home/your_app_name'
#    - scp -P22 -r . "$TARGET_SERVER_USER@$TARGET_SERVER_HOST":/home/your_app_name

#    - echo "$TARGET_PRIVATE_SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#    - chmod 700 ~/.ssh && chmod 600 ~/.ssh/*

# Shell gitlab runner executer
#echo "Setup tagget server directories"
#pm2 deploy ecosystem.config.js production setup 2>&1 || true
#
#echo "make deploy"
#pm2 deploy ecosystem.config.js production
